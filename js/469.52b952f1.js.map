{"version":3,"file":"js/469.52b952f1.js","mappings":"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","sources":["webpack://vue-hangout/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://vue-hangout/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://vue-hangout/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://vue-hangout/./node_modules/idb/build/wrap-idb-value.js","webpack://vue-hangout/./node_modules/idb/build/index.js","webpack://vue-hangout/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://vue-hangout/./node_modules/firebase/app/dist/esm/index.esm.js","webpack://vue-hangout/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://vue-hangout/./src/stores/chatRoomStore.js","webpack://vue-hangout/./src/stores/timeStore.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        !!navigator.userAgent &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.9.27\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"10.8.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call initializeApp() first',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        try {\r\n                            db.createObjectStore(STORE_NAME);\r\n                        }\r\n                        catch (e) {\r\n                            // Safari/iOS browsers throw occasional exceptions on\r\n                            // db.createObjectStore() that may be a bug. Avoid blocking\r\n                            // the rest of the app functionality.\r\n                            console.warn(e);\r\n                        }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME);\r\n        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\r\n        // We already have the value but tx.done can throw,\r\n        // so we need to await it here to catch errors\r\n        await tx.done;\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        await tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        var _a, _b;\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n            // If we failed to construct a heartbeats cache, then return immediately.\r\n            if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {\r\n                return;\r\n            }\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        var _a;\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {\r\n                return idbHeartbeatObject;\r\n            }\r\n            else {\r\n                return { heartbeats: [] };\r\n            }\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"10.8.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'endBefore';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAt';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'startAfter';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToFirst';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n        this.type = 'limitToLast';\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n        this.type = 'orderByChild';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByKey';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByPriority';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'orderByValue';\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n        this.type = 'equalTo';\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n * @internal\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAppCheckImpl - custom app check implementation\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\r\n    setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const componentContainer = new ComponentContainer('database-standalone');\r\n    const authProvider = new Provider('auth-internal', componentContainer);\r\n    let appCheckProvider;\r\n    if (customAppCheckImpl) {\r\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\r\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    }\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\r\n}\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { defineStore } from 'pinia';\nimport { initializeApp } from \"firebase/app\";\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { ref as fireBaseRef, getDatabase, onValue, update, push, child} from \"firebase/database\";\nimport axios from 'axios';\n\nconst apiUrl = process.env.VUE_APP_API_URL;\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCTIDRYBSvZak9CqKLulVG3XcqXQgbA4Tk\",\n  authDomain: \"hangoutchatroom-e390c.firebaseapp.com\",\n  projectId: \"hangoutchatroom-e390c\",\n  storageBucket: \"hangoutchatroom-e390c.appspot.com\",\n  messagingSenderId: \"59840666908\",\n  appId: \"1:59840666908:web:a03db8e68c40b76b4baed9\",\n  measurementId: \"G-TSYQ76H9JL\"\n};\n\nconst chatRoomApp = initializeApp(firebaseConfig);\nconst db = getDatabase(chatRoomApp);\n\nimport timeStore from '../stores/timeStore';\nconst time = timeStore();\n\nexport default defineStore ('chatRoomStore',{\n    state:()=>({\n        loadingRoom:false,\n        allRoom:{},\n        userId:\"\",\n        targetId:\"\",\n        targetRoomKey:\"\",\n        targetName:\"\",\n        targetPic:\"\",\n        ownKeys:[],\n        ownRooms:[],// ownRooms以陣列形式才能用時間排序\n        renderNavData:[],\n        targetMsgDataAry:[],\n        renderMsgData:[],\n    }),\n    actions:{\n        getConnect(){\n            //初始都先設空值\n            this.targetRoomKey=\"\";\n            this.allRoom={};\n            this.ownKeys=[];\n            this.ownRooms=[];\n            this.renderNavData=[];\n            //先取得所有聊天室\n            const chatRoomRef = fireBaseRef(db, `/`);\n            //建立連線，當監聽的數據產生變化時\n            onValue(chatRoomRef, (snapshot) => {\n                this.allRoom = snapshot.val(); //snapshot當前的數據狀態 .val()結果是一整個物件\n            });\n        },\n        getTargetRoomKey(){\n            // 取得與目標對象的聊天室鑰匙號碼\n            if(this.allRoom == null){\n                //如果伺服器完全沒有聊天室，則表示沒有與目標的聊天室\n                return\n            }else{\n                //若伺服器有聊天室\n                //取得與目標對象的鑰匙號碼（ChatRoomTarget視窗使用）\n                let allRoomKeys = Object.keys(this.allRoom)\n                allRoomKeys.forEach((item)=>{\n                    if(this.allRoom[item].owner==undefined){\n                        return\n                    }\n                    // 若鑰匙的擁有者為自己和目標對象，則取得目標聊天室鑰匙\n                    if(this.allRoom[item].owner.includes(this.userId) && this.allRoom[item].owner.includes(this.targetId)){\n                        this.targetRoomKey = item\n                    }\n                })\n            }\n        },\n        getOwnKeys(){\n            //取得自己所擁有的所有鑰匙號碼(ChatNav側邊選單使用)\n            if(this.allRoom == null){\n                //如果伺服器完全沒有聊天室，則表示自己也沒有任何鑰匙\n                return\n            }else{\n                //如果有聊天室，要篩選出自己有的鑰匙號碼＋聊天對象\n                let allRoomKeys = Object.keys(this.allRoom)\n                allRoomKeys.forEach((item)=>{\n                    if(this.allRoom[item].owner==undefined){\n                        return\n                    }\n                    // 若鑰匙的擁有者有自己，且尚未寫入，則寫入自己擁有鑰匙\n                    if(this.allRoom[item].owner.includes(this.userId) && (!this.ownKeys.includes(item))){\n                        //鑰匙號碼\n                        this.ownKeys.push(item)\n                        //房間資訊\n                        this.ownRooms.push(this.allRoom[item])\n                    }\n                    else if( this.ownKeys.includes(item) ){\n                    //如果伺服器資料變動是我擁有的聊天室，的時間更新，那麼就更新房間資訊\n                    //找到房間，更新資訊\n                        let updateRoomIndex;\n                        for(let i=0;i<this.ownKeys.length;i++){\n                            if( item == this.ownRooms[i].roomKey && ( this.ownRooms[i].lastestTime.time!=this.allRoom[item].lastestTime.time)){\n                                updateRoomIndex = i;\n                                this.ownRooms[updateRoomIndex] = this.allRoom[item]\n                            }\n                        }\n                    }\n                })\n                //取得目標房間資訊\n                this.getTargetRoomMsg();\n                //將房間資料替換成要渲染的資料\n                this.updateData();\n            }\n        },\n        updateData(){\n            console.log(`執行了一次updateData`)\n            this.renderNavData = [];\n            \n            let promises = [];\n            for (let i=0;i<this.ownRooms.length;i++){\n                let obj ={\n                    \"lastestTime\":\"\",\n                    \"roomKey\":\"\",\n                    \"otherId\":\"\",\n                    \"otherName\":\"\",\n                    \"otherPic\":\"\",\n                    \"petPic\":\"\"\n                }\n                obj.lastestTime = this.ownRooms[i].lastestTime.time;\n                let otherIdFilter = this.ownRooms[i].owner.filter((id)=>{\n                    return id!=this.userId\n                })\n                obj.otherId = otherIdFilter[0];\n                obj.roomKey = this.ownRooms[i].roomKey;\n                this.loadingRoom = true;\n\n                let axiosPromise = axios.get(`${apiUrl}/users/${otherIdFilter[0]}`)\n                .then((res)=>{\n                    obj.otherName = res.data.userInfo.name\n                    obj.otherPic = res.data.userInfo.pic\n                    obj.petPic = res.data.petInfo.pic\n\n                    // 因數據產生變化時，會同時多次執行updateData函式，故若已有對象資料則不再push\n                    let alreadyResult = this.renderNavData.filter( data =>{\n                        return data.otherId == otherIdFilter[0]\n                    })\n                    if(alreadyResult[0] == undefined){\n                        this.renderNavData.push(obj)\n                    }\n                })\n                .catch((err)=>{\n                    console.log(err)\n                })\n\n                promises.push(axiosPromise);\n            }\n            \n            Promise.all(promises)\n            .then(() => {\n                //排序房間\n                this.sortOwnRooms()\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        },\n        sortOwnRooms(){\n            this.renderNavData = this.renderNavData.sort(function (a, b) {\n                return a.lastestTime < b.lastestTime ? 1 : -1;\n            });\n            this.loadingRoom = false;\n        },\n        switchTargetIdAndRoomKey(id,key){\n            this.targetRoomKey = key;\n            this.targetId = id;\n            this.getTargetRoomMsg();\n            this.getTargetInfo();\n        },\n        getTargetRoomMsg(){\n            this.targetMsgDataAry=[];\n            this.renderMsgData=[];\n            for(let i=0;i<this.ownRooms.length;i++){\n                //取得與目標對象的聊天室\n                if(this.ownRooms[i].roomKey==this.targetRoomKey){\n\n                    let ownRoomsMsgKeys = Object.keys(this.ownRooms[i].msgData)\n\n                    ownRoomsMsgKeys.forEach((msgKey)=>{\n                        this.targetMsgDataAry.push(this.ownRooms[i].msgData[msgKey])\n                    })\n                    \n                    this.sortMsgData(this.targetMsgDataAry)\n                    return\n                }\n            }\n        },\n        getTargetInfo(){\n            if(this.targetId){\n                axios.get(`${apiUrl}/users/${this.targetId}`)\n                .then((res)=>{\n                    this.targetName = res.data.userInfo.name\n                    this.targetPic = res.data.userInfo.pic\n                })\n                .catch((err)=>{\n                    console.log(err)\n                })\n            }\n        },\n        sortMsgData(data){\n            this.renderMsgData = data.sort(function (a, b) {\n                return a.time > b.time ? 1 : -1;\n            });\n        },\n\n        sendMsg(msg){\n            let roomKey;\n            if(this.targetRoomKey){\n                // 如果已有開聊天室，則往下加入訊息\n                roomKey = this.targetRoomKey;\n                //訊息鑰匙\n                const msgKey = push(child(fireBaseRef(db), `/${roomKey}`)).key\n\n                let msgData={\n                    msgKey,\n                    \"sender\":this.userId,\n                    msg,\n                    \"time\":time.getCurrentTime()\n                }\n                //新增訊息\n                const updates = {};\n                updates[`/${roomKey}/msgData/${msgKey}`] = msgData;\n                update(fireBaseRef(db), updates) ;\n                //更新最新訊息時間\n                let lastestTime ={\n                    \"time\":time.getCurrentTime()\n                }\n                const updateLatestTime={};\n                updateLatestTime[`/${roomKey}/lastestTime`] = lastestTime ;\n                update(fireBaseRef(db), updateLatestTime);\n\n            }else{\n                // 如果未開聊天室，則拿一把新聊天室鑰匙\n                roomKey = push(child(fireBaseRef(db), `/`)).key;\n                //訊息鑰匙\n                const msgKey = push(child(fireBaseRef(db), `/${roomKey}`)).key\n\n                let roomData ={\n                    roomKey,\n                    \"owner\":[this.userId,this.targetId],\n                    \"lastestTime\":{\n                        \"time\":time.getCurrentTime()\n                    },\n                    \"msgData\":{}\n                }\n                roomData.msgData[msgKey]={\n                    msgKey,\n                    \"sender\":this.userId,\n                    msg,\n                    \"time\":time.getCurrentTime()\n                }\n                const updates = {};\n                updates[`/${roomKey}`] = roomData;\n                update(fireBaseRef(db), updates) ;\n            }\n        }\n    }\n})\n\n\n  ","import { defineStore } from 'pinia';\n\nexport default defineStore ('timeStore',{\n    state:()=>({\n    }),\n\n    actions:{\n        getCurrentTime(){\n            // 創建一個新的 Date 物件，其中包含當前的日期和時間\n            let currentDate = new Date();\n            let year = currentDate.getFullYear();\n            let month = currentDate.getMonth()+1; // 月份是從 0 開始的，所以要加 1\n            let day = currentDate.getDate();\n            let hours = currentDate.getHours();\n            let minutes = currentDate.getMinutes();\n            let seconds = currentDate.getSeconds();\n\n            //個位數前面補0\n            month = (month < 10 ? '0' : '') + month;\n            day = (day < 10 ? '0' : '') + day;\n            hours = (hours < 10 ? '0' : '') + hours;\n            minutes = (minutes < 10 ? '0' : '') + minutes;\n            seconds = (seconds < 10 ? '0' : '') + seconds;\n\n            return  `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n        }\n    }\n})"],"names":["CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","join","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","DecodeBase64StringError","constructor","super","arguments","name","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","Date","dateValue","getTime","prop","hasOwnProperty","isValidKey","key","getGlobal","self","window","g","getDefaultsFromGlobal","__FIREBASE_DEFAULTS__","getDefaultsFromEnvVariable","process","defaultsJsonString","JSON","parse","getDefaultsFromCookie","document","match","cookie","decoded","getDefaults","info","getDefaultEmulatorHost","productName","_a","_b","emulatorHosts","getDefaultEmulatorHostnameAndPort","host","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","reject","resolve","promise","Promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","header","alg","type","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","stringify","getUA","navigator","isMobileCordova","test","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","ERROR_NAME","FirebaseError","code","customData","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","jsonEval","decode","claims","parts","split","isValidFormat","isAdmin","obj","call","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","stringToByteArray","high","low","stringLength","_delegate","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","isComponentEager","instanceDeferred","clearInstance","delete","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","warn","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","removeEventListener","success","addEventListener","then","cacheDonePromiseForTransaction","tx","done","complete","DOMException","idbProxyTraps","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","apply","unwrap","storeNames","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","name$o","version$1","logger","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","_getProvider","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","newApp","getApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","date","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","enableLogging$1","logger_","persistent","bind","logWrapper","prefix","fatal","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","readyState","called","wrappedFn","body","setTimeout","Math","floor","attachEvent","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","ebits","fbits","bias","s","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","isChromeExtensionContentScript","href","isWindowsStoreApp","Windows","UI","errorForServerCode","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","isEmpty","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","sparseSnapshotTreeForEachChild","tree","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","repoLog","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","_checkNotDeleted","_root","thennablePushRef","pushRef","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","getDatabase","emulator","connectDatabaseEmulator","mockUserToken","registerDatabase","simpleListen","echo","onEcho","apiUrl","firebaseConfig","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","chatRoomApp","timeStore","defineStore","state","loadingRoom","allRoom","userId","targetId","targetRoomKey","targetName","targetPic","ownKeys","ownRooms","renderNavData","targetMsgDataAry","renderMsgData","actions","getConnect","chatRoomRef","fireBaseRef","getTargetRoomKey","allRoomKeys","item","owner","getOwnKeys","updateRoomIndex","roomKey","lastestTime","getTargetRoomMsg","updateData","promises","otherIdFilter","otherId","axiosPromise","axios","otherName","userInfo","otherPic","pic","petPic","petInfo","alreadyResult","err","sortOwnRooms","switchTargetIdAndRoomKey","getTargetInfo","ownRoomsMsgKeys","msgData","msgKey","sortMsgData","sendMsg","getCurrentTime","updateLatestTime","roomData","currentDate","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds"],"sourceRoot":""}